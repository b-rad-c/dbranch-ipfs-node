version: "3.9"
services:

  curator-daemon:
    image: dbranch/curator
    command: dbranch curator daemon
    environment:
      IPFS_HOST: ipfs-node:5001
      POSTGRES_DB_HOST: postgres
      CARDANO_WALLET_HOST: http://cardano-wallet:8090
      POSTGRES_DB_FILE: /run/secrets/postgres_db
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_USER_FILE: /run/secrets/postgres_user
      CARDANO_ADDRESS_FILE: /dbranch/backend/samples/cardano_addresses.txt
    secrets:
    - postgres_password
    - postgres_user
    - postgres_db
    build:
      context: .
      dockerfile: curator/Dockerfile
    volumes:
      - ./backend:/dbranch/backend
  
  curator-server:
    image: dbranch/curator
    command: dbranch curator server
    environment:
      IPFS_HOST: ipfs-node:5001
      POSTGRES_DB_HOST: postgres
      CARDANO_WALLET_HOST: http://cardano-wallet:8090
      POSTGRES_DB_FILE: /run/secrets/postgres_db
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_USER_FILE: /run/secrets/postgres_user
      CARDANO_ADDRESS_FILE: /dbranch/backend/samples/cardano_addresses.txt
    ports:
      - "1323:1323"
    secrets:
    - postgres_password
    - postgres_user
    - postgres_db
    build:
      context: .
      dockerfile: curator/Dockerfile
    volumes:
      - ./backend:/dbranch/backend

  ipfs-node:
    image: dbranch/ipfs-node
    ports:
      - "4001:4001"
      - "4001:4001/udp"
      - "8081:8081"
      - "8080:8080"
    build:
      context: .
      dockerfile: ipfs/Dockerfile

  cardano-node:
    image: inputoutput/cardano-node:1.33.0
    environment:
      NETWORK: testnet
    volumes:
      - node-testnet-db:/data
      - node-ipc:/ipc
      - node-db:/data/db
    restart: on-failure
    logging:
      driver: "json-file"
      options:
        compress: "true"
        max-file: "10"
        max-size: "50m"
    healthcheck:
      # Ping the EKG port to see if it responds.
      # Assuming if EKG isn't up then the rest of cardano-node isn't either.
      test: ["CMD-SHELL", "curl -f 127.0.0.1:12788 || exit 1"]
      interval: 60s
      timeout: 10s
      retries: 5
  
  cardano-wallet:
    image: inputoutput/cardano-wallet:2022.1.18
    volumes:
      - wallet-testnet-db:/wallet-db
      - node-ipc:/ipc
    ports:
      - 8090:8090
    entrypoint: []
    command: bash -c "
        ([[ $$NETWORK == \"mainnet\" ]] && $$CMD --mainnet) ||
        ($$CMD --testnet /config/testnet/genesis-byron.json)"
    environment:
      CMD: "cardano-wallet serve --node-socket /ipc/node.socket --database /wallet-db --listen-address 0.0.0.0"
      NETWORK: testnet
    restart: on-failure
    logging:
      driver: "json-file"
      options:
        compress: "true"
        max-file: "10"
        max-size: "50m"

  postgres:
    image: postgres:11.5-alpine
    environment:
      - POSTGRES_LOGGING=true
      - POSTGRES_DB_FILE=/run/secrets/postgres_db
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - POSTGRES_USER_FILE=/run/secrets/postgres_user
    secrets:
      - postgres_password
      - postgres_user
      - postgres_db
    ports:
      - ${POSTGRES_PORT:-5432}:5432
    volumes:
      - postgres:/var/lib/postgresql/data
    restart: on-failure
    healthcheck:
      # Use pg_isready to check postgres is running. Substitute different
      # user `postgres` if you've setup differently to config/pgpass-mainnet
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  cardano-db-sync:
    image: inputoutput/cardano-db-sync:12.0.2
    environment:
      - NETWORK=testnet
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      # get current snapshot: https://github.com/input-output-hk/cardano-db-sync/releases
      - RESTORE_SNAPSHOT=https://updates-cardano-testnet.s3.amazonaws.com/cardano-db-sync/12/db-sync-snapshot-schema-12-block-3514204-x86_64.tgz
      - RESTORE_RECREATE_DB=N
    depends_on:
      # Depend on both services to be healthy before starting.
      cardano-node:
        condition: service_healthy
      postgres:
        condition: service_healthy
    secrets:
      - postgres_password
      - postgres_user
      - postgres_db
    volumes:
      - db-sync-data:/var/lib/cdbsync
      - node-ipc:/node-ipc
    restart: on-failure
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

secrets:
  postgres_db:
    file: ./secrets/postgres_db
  postgres_password:
    file: ./secrets/postgres_password
  postgres_user:
    file: ./secrets/postgres_user

volumes:
  postgres:
  node-db:
  db-sync-data:
  node-testnet-db:
  wallet-testnet-db:
  node-ipc:
